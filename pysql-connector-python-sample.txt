MySQL Connector/Python is a Python driver for MySQL databases. It enables you to connect to MySQL, execute SQL queries, and interact with MySQL databases. Here are some basic examples of how to use mysql-connector-python:

1. Install MySQL Connector/Python:

You can install MySQL Connector/Python using pip:

bash

pip install mysql-connector-python

2. Connecting to a MySQL Database:

To connect to a MySQL database, you'll need to provide the necessary connection parameters:

python

import mysql.connector

# Define the connection parameters
config = {
    'user': 'your_username',
    'password': 'your_password',
    'host': 'localhost',
    'database': 'your_database_name',
}

# Create a connection
conn = mysql.connector.connect(**config)

3. Creating a Table:

You can create a new table in your database using SQL statements. For example, let's create a simple "users" table:

python

cursor = conn.cursor()

create_table_query = """
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL
);
"""

cursor.execute(create_table_query)

4. Inserting Data:

You can insert data into the table using SQL INSERT statements:

python

insert_data_query = "INSERT INTO users (username, email) VALUES (%s, %s)"
user_data = ("john_doe", "john.doe@email.com")

cursor.execute(insert_data_query, user_data)

# Make sure to commit the changes
conn.commit()

5. Querying Data:

You can execute SQL queries to retrieve data from the database:

python

select_query = "SELECT * FROM users"
cursor.execute(select_query)

for row in cursor.fetchall():
    print(row)

6. Updating Data:

You can update existing data using SQL UPDATE statements:

python

update_data_query = "UPDATE users SET email = %s WHERE username = %s"
new_email = "new_email@email.com"
username_to_update = "john_doe"

cursor.execute(update_data_query, (new_email, username_to_update))
conn.commit()

7. Deleting Data:

You can delete data using SQL DELETE statements:

python

delete_data_query = "DELETE FROM users WHERE username = %s"
username_to_delete = "john_doe"

cursor.execute(delete_data_query, (username_to_delete,))
conn.commit()

8. Closing the Connection:

Always close the connection when you are done:

python

cursor.close()
conn.close()

Make sure to handle exceptions and errors appropriately in your code, and use proper security measures like prepared statements to prevent SQL injection.

These are some basic examples of how to use MySQL Connector/Python for interacting with a MySQL database in Python. Depending on your application, you may need to perform more complex operations and error handling.
